배열의 정의
-일정한 차례나 간격에 따라 벌여 놓음(사전적 정의)
-차례(순서)와 관련된 기본적인 자료구조
-인덱스와 원소값의 쌍으로 구성된 집합

추상자료형
-객체 및 관련된 연산의 정의로 구성됨
-자료구조 구현전의 설계 단계 

자료형 
-메모리 저장 할당을 위한 변수선언
-자료구조의 구현단계 (프로그래밍 언어를 이용한 선언)

  컴퓨터       실제 값      개발자
00ffff00     100       a[0]
00ffff04     200       a[1]
00ffff08     300       a[2] 
00ffff0c     400       a[3]
00ffff10     500       a[4] 

배열의 생성
void create(int n){ // n = 5
	int a[n];
	int i;
	for(i = 0; i < n; i++){
		a[i] = 0;
	}// 배열 a 인덱스 0 ~ 4까지 원소 값 0
}

배열값의 검색
#define array_size = 5

int retrieve(int *a, int i) {
	if(i > 0 && i < array_size){
		return a[i];
	} else {
		printf("Error");
	}
}

void store(int *a, int i, int e){ //i = 3 , e = 35
	if(i > 0 && i < array_size){
		a[i] = e;
	} else {
		printf("Error");
	}
}

1차원 배열의 정의
-A[i]는 배열의 첫 번째 원소 A[0]이 저장된 메모리 주소인 a로부터 시작하여,
 A[0]부터 A[i-1]개 까지의 i개의 배열 A[]를 지나서 저장
-따라서, A[]의 메모리 시작 주소를 a라고 가정하면,
 A[i]의 메모리 저장 주소는 [a + i*k]가 됌
 A[0] A[1]   A[2]   A[3]   A[4]
 [A(L) A(L+1) A(L+2) A(L+3) A(L+4)]
 
 배열의 확장
 행렬의 배열 표현
 행렬을 컴퓨터에서 표현하기에는 2차원 배열이 적합하다.
J[0] → 
I[0]1 2 3 
  ↓ 4 5 6
    7 8 9 
	
희소행렬의 표현 
-원소값이 0인 원소가 그렇지 않은 원소보다 상대적으로 많음

희소행렬의 효율적 배열표현
-0인 원소는 저장 하지 않고 0이 아닌 값만을 따로 모아서 저장된
-메모리 낭비를 막고 효율성이 향상 됌

단원 정리
-배열 : 인덱스와 원소값(index,value)의 쌍으로 구성된 집합이며
정의된 각 인덱스는 그 인덱스와 관련된 값을 저장
-2차원 배열 : 원소값을 특정하기 위해 필요한 인덱스가 두 개인 배열
-행렬의 행 우선 저장방식 : 하나의 행을 연속적으로 메모리에 할당하고, 그 다음 행을 메모리 영역에 할당하는 방법
-행렬의 열 우선 저장방식 : 하나의 열을 연속적으로 메모리에 할당하고, 그 다음 열을 메모리 영역에 할당하는 방법
-희소행렬(sparse matrix) : 원소값이 0인 원소가 그렇지 않은 원소보다 상대적으로 많은 행렬
