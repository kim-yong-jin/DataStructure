스택(개념) : 객체와 그 객체가 저장되는 순서를 기억하는 방법에 관한 자료구조
스택의 추상자료형
스택 객체 : 0개 이상의 원소를 갖는 유한 순서 리스트

스택의 다양한 응용
- 변수에 대한 메모리의 할당과 수집을 위한 시스템 스택
- 서르부틴 호출 관리를 위한 스택
- 연산자들 간의 우선순위에 의해 계산 순서가 결정되는 수식 계산
- 인터럽트의 처리와 되돌아갈 명령 수행 지점을 저장하기 위한 스택
- 컴파일러, 순환 호출관리

스택의 삭제 연산자
-'top--'에서 사용된 '--' 연산자의 위치에 따라 연산의 적용순서가  달라질 수 있음

스택의 생성
#define STACK_SIZE 10
typedef int element;
element stack[STACK_SIZE];
int top = -1;

스택의 삽입 연산
void push(int item){
	if(top >= STACK_SIZE - 1){
		return StacklsFull();
	}else{
		stack[++top] = item;
	}
}
스택의 삭제 연산
int pop(){
	if(top == -1){
		return StacklsEmpty();
	}else{
		return stack[top--];
	}
}

수식의 계산
- 연산자의 계산 우선순위를 생각해야함
- A + B * C + D 
((A + (B * C)) + D)

수식의 표기 방법
1.중위 표기법(infix notaition)
- 연산자를 피여산자 사이에 표기하는 방법
- A + B

2.전위 표기법(prefix notaition)
- 연산자를 피연산자 앞에 표기하는 방법
- + AB

3.후위 표기법(postfix notaition)
- 연산자를 피연산자의 뒤에 표기하는 방법
- AB +

후위 표기법
ex. A * B + C * D
- ((A * B) + (C * D)) 
- (AB * + (C * D))
- AB * CD * +
 